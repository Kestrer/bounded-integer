//! Examples of bounded integers generated by the [`bounded_integer!`] macro.
//!
//! This module is not present when using the crate.

use crate::bounded_integer;

bounded_integer! {
    /// A bounded struct, implemented as a protected newtype.
    ///
    /// This was generated from:
    /// ```
    #[cfg_attr(feature = "step_trait", doc = "# #![feature(step_trait)]")]
    /// # use bounded_integer::bounded_integer;
    /// bounded_integer! {
    ///     pub struct BoundedStruct(-8, 7);
    /// }
    /// ```
    pub struct BoundedStruct(-8, 7);
}

bounded_integer! {
    /// A bounded enum.
    ///
    /// This was generated from:
    /// ```
    #[cfg_attr(feature = "step_trait", doc = "# #![feature(step_trait)]")]
    /// # use bounded_integer::bounded_integer;
    /// bounded_integer! {
    ///     pub enum BoundedEnum(-8, 7);
    /// }
    /// ```
    pub enum BoundedEnum(-8, 7);
}

bounded_integer! {
    /// A bounded enum with named variants.
    ///
    /// This was generated from:
    /// ```
    #[cfg_attr(feature = "step_trait", doc = "# #![feature(step_trait)]")]
    /// # use bounded_integer::bounded_integer;
    /// bounded_integer! {
    ///     pub enum BoundedEnumNamed {
    ///         Zero,
    ///         One,
    ///         Two,
    ///     }
    /// }
    /// ```
    pub enum BoundedEnumNamed {
        Zero,
        One,
        Two,
    }
}
